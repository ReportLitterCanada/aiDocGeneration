<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Terms of Reference</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f2f5;
            color: #334;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
            letter-spacing: 1px;
        }

        ul {
            list-style: none;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }

        li {
            background: #fff;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            width: 100%;
            display: none;
            transform: translateY(20px);
            opacity: 0;
            transition: transform 0.3s ease, opacity 0.3s ease;
        }

        li.visible {
            display: block;
            transform: translateY(0);
            opacity: 1;
        }

        strong {
            color: #333;
            font-weight: bold;
            font-size: 1.2em;
        }

        textarea,
        input[type="text"] {
            width: 100%;
            margin-top: 15px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1.2em;
            background-color: #fafafa;
            transition: border-color 0.3s ease;
            box-sizing: border-box;
        }

        textarea {
            min-height: 150px;
        }

        textarea:focus,
        input[type="text"]:focus {
            border-color: #007bff;
            outline: none;
        }

        .buttons {
            margin-top: 20px;
            text-align: right;
        }

        .buttons button {
            padding: 10px 20px;
            margin-left: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.1em;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .buttons button:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }

        .buttons button:active {
            background-color: #003f7f;
            transform: translateY(0);
        }

        input[type="text"] {
            display: none;
        }

        .edit-text {
            background-color: transparent;
            border: none;
            cursor: pointer;
            font-size: 1em;
            color: #007bff;
            transition: color 0.3s ease;
        }

        .edit-icon {
            background-color: transparent;
            border: none;
            cursor: pointer;
            font-size: 1.5em;
            color: #007bff;
            transition: color 0.3s ease;
        }

        #download-btn,
        #download-word-btn {
            display: none;
            margin-top: 30px;
            padding: 15px 30px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.2em;
            text-align: center;
            transition: background-color 0.3s ease, transform 0.2s ease;
            max-width: 800px;
            width: 100%;
        }

        #download-btn:hover,
        #download-word-btn:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }

        #download-btn:active,
        #download-word-btn:active {
            background-color: #003f7f;
            transform: translateY(0);
        }

        select {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1.1em;
            background-color: #fafafa;
            box-sizing: border-box;
            transition: border-color 0.3s ease;
        }

        select:focus {
            border-color: #007bff;
            outline: none;
        }

        #extraPrompt label {
            display: block;
            margin-top: 10px;
            font-weight: bold;
        }

#evaluation-type,
#date-section {
    background: #fff;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    width: 100%;
    margin-bottom: 20px;
}

#evaluation-type select,
#date-section input[type="date"] {
    margin-top: 15px;
}

#evaluation-type .buttons,
#date-section .buttons {
    text-align: right;
}
.checkbox-container {
    display: flex;
    flex-direction: column; /* Stack items vertically */
    gap: 15px; /* Space between each row */
    margin-bottom: 20px; /* Space below the container */
}

.checkbox-item {
    display: flex;
    align-items: center;
    gap: 10px; /* Space between the label and checkbox */
}
.spinner {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    border-top: 4px solid #3498db;
    width: 12px;
    height: 12px;
    animation: spin 1s linear infinite;
    display: none; /* Hide by default */
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}
    </style>
</head>

<body>
    <h1>Terms of Reference</h1>
    <% if (typeof additionalInfo !== 'undefined' && additionalInfo.length > 0) { %>
        <script>
            console.log("<%= additionalInfo.length %>");
            console.error("<%= additionalInfo %>");
          </script>
      <% } %>
    <ul>

        <div id="evaluation-type">
            <strong for="typeOfEvaluation">Type of Evaluation:</strong>
            <select id="typeOfEvaluation" name="typeOfEvaluation" required >
                <option value="" disabled selected>Select type</option>
                <option value="Project Evaluation">Project Evaluation</option>
                <option value="Outcome Evaluation">Outcome Evaluation</option>
                <option value="Thematic Evaluation">Thematic Evaluation</option>
            </select>
            <div class="buttons">
                <button id="save-evaluation-type" onclick="saveEvaluationType()">Save Evaluation Type</button>
            </div>
            <div id="selected-evaluation-type" style="margin-top: 20px; color: #333;">
                <!-- Selected type will be shown here -->
            </div>
        </div>
    
            <% sections.forEach(function(section, index) { %>
                <li id="section-<%= index %>" class="<%= index === 0 ? '' : '' %>">
                    <!-- Show extraPromptParameters dropdown first if present -->
                    <div id="extraPrompt-<%= index %>">
                        <% if (section.extraPromptParameters && section.extraPromptParameters.length > 0) { %>
                            
                            <strong for="extraPrompt-<%= index %>">Which evaluation criteria do you want to include in the Terms of Reference?</strong>
                            <div style="margin-top: 20px;">
                            <% section.extraPromptParameters.forEach(function(parameter) { %>
                               
                                <div class="checkbox-item">
                                    <input type="checkbox" id="<%= parameter.code %>" name="<%= parameter.code %>"
                                    value="<%= parameter.code %>" />
                                    <label for="<%= parameter.code %>">
                                        <%= parameter.name %>
                                    </label>
                                  
                                </div>
                                
                            <% }); %>
                            </div>
                            <div class="buttons">
                                <button id="save-prompt-<%= index %>"
                                    onclick="savePromptForSection(<%= index %>)">
                                    
                                    <span class="save-text">Save</span>
                                    <div id="spinner-<%= index %>" class="spinner" style="display: none;"></div> <!-- Spinner added here -->
                                 </button>
                            </div>
                        <% } else { %>
                            <!-- If no extraPromptParameters, show section name and value directly -->
                            <strong>
                                <%= section.NAME %>
                            </strong>
                            <div id="content-<%= index %>">
                                <p id="textarea-<%= index %>" readonly><%= section.VALUE %></p>
                                <textarea type="text" id="input-<%= index %>" value="<%= section.VALUE %>" style="display: none;" >
                                    </textarea> 
                                <div id="short-value-<%= index %>" style="margin-top: 20px;color: #333;">
                                  
                                 
                                </div>
                                <button onclick="viewMore(<%= index %>)" id="view-more-<%= index %>" style="margin-top:20px; background:transparent;border:none;color:blue;display: none;cursor: pointer;">View More</button>
                            </div>
        
                            <div class="buttons">
                                <button onclick="editSection(<%= index %>)" id="edit-<%= index %>"
                                    class="edit-text">Edit</button>
                                    <button onclick="acceptSection(<%= index %>)" id="accept-<%= index %>" class="accept-button">
                                        <span class="accept-text">Accept</span>
                                        <div id="spinner-<%= index %>" class="spinner" style="display: none;"></div> <!-- Spinner added here -->
                                    </button>
                                <button onclick="saveSection(<%= index %>)" id="save-<%= index %>"
                                    style="display:none;">
                                    <span class="save-text">Save</span>
                                    <div id="saveSpinner-<%= index %>" class="spinner" style="display: none;"></div> <!-- Spinner added here -->
                                </button>
                                <button onclick="discardSection(<%= index %>)" id="discard-<%= index %>"
                                    style="display:none;">Discard</button>
                            </div>
                        <% } %>
                    </div>
                </li>
        
                <% if (index === 0) { %>
                    <div id="date-section" style="display: none;">
                        <strong for="startDate">Starting Date</strong><br/>     
                        <div id="selected-date" style="margin-top: 20px; color: #333;">
                            <!-- Selected date will be shown here -->
                        </div>
                        <div id="the-date">
                            <div style="margin-top: 20px;">   
                                <input type="date" id="startDate" name="startDate" />
                               
                            </div>
                        </div>
                            <div class="buttons">
                                <button id="save-start-date" onclick="saveStartDate()">
                                 <span class="date-text"> Save</span>  
                                    <div id="spinner-start-date" class="spinner" style="display: none;"></div> <!-- Spinner added here -->
                                </button>
                         
                        </div>
                      
                    </div>
                    
                    
                <% } %>
            <% }); %>
        </ul>
        
        <div style="display: flex; justify-content: center; align-items: center; gap: 10px; max-width: 850px; margin: 0 auto;">
            <button id="download-btn" onclick="downloadFile()">Download PDF</button>
            <button id="download-word-btn" onclick="downloadWordFile()">Download Word</button>
        </div>
        


    <script>
 let acceptedSections = new Set();
function updateSelectedType() {
        const selectElement = document.getElementById('typeOfEvaluation');
        const selectedType = selectElement.options[selectElement.selectedIndex].text;
        const displayElement = document.getElementById('selected-evaluation-type');
      
        displayElement.textContent = `${selectedType}`;
      
    }

    function updateSelectedDate() {
        const startDate = document.getElementById('startDate').value;
        const displayElement = document.getElementById('selected-date');
        const dateInput=document.getElementById('the-date');
        dateInput.style.display='none';
        displayElement.textContent = `${startDate}`;

    }
function saveStartDate() {
    const startDate = document.getElementById('startDate').value;
    const spinner = document.getElementById('spinner-start-date');  // Get the spinner element
    const saveButton = document.getElementById('save-start-date');  // Get the save button
    const dateText=document.querySelector('.date-text');

    // Validate that a date is selected
    if (!startDate) {
        alert('Please select a starting date.');
        return;
    }

    // Show the spinner and disable the save button while processing
    if (spinner) {
        dateText.style.display='none';
        spinner.style.display = 'inline-block';  // Show spinner
       
       
    }

    // Store the starting date (send it to the server or save locally)
    
    fetch('/save-start-date', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ startDate })  // Match this to the server-side expectation
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateSelectedDate();

            // Now proceed to section 1
            acceptSection(0, false, true); 
        } else {
            console.error('Failed to save starting date:', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
    })
  
}
function saveEvaluationType() {
    const typeOfEvaluation = document.getElementById('typeOfEvaluation').value;

    if (!typeOfEvaluation) {
        alert('Please select a type of evaluation.');
        return;
    }
    fetch('/save-evaluation-type', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ evaluationType: typeOfEvaluation })  // Match this to the server-side expectation
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
        } else {
            console.error('Failed to save evaluation type:', data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });

    // Hide the evaluation type dropdown and save button
    document.getElementById('typeOfEvaluation').style.display = 'none';
    document.getElementById('save-evaluation-type').style.display = 'none';


    // Show the first section
    const firstSection = document.getElementById('section-0');
    updateSelectedType();
    if (firstSection) {
        firstSection.classList.add('visible');
    }
}
  function downloadWordFile() {
            fetch('/download-word', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok.');
                    }
                    return response.blob();
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(new Blob([blob]));
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = 'Evaluation_Results.docx';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                })
                .catch(error => console.error('Download error:', error));
        }

        function downloadFile() {
            fetch('/download-pdf', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok.');
                    }
                    return response.blob();
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(new Blob([blob]));
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = 'Evaluation_Results.pdf';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                })
                .catch(error => console.error('Download error:', error));
        }

       
        // Embedding the sections array directly into the client-side JavaScript
        let sections = <%- JSON.stringify(sections) %>;
     
        function savePromptForSection(index) {
    const section = sections[index];
    const selectedParameters = section.extraPromptParameters
        .map(parameter => document.getElementById(parameter.code).checked ? parameter.code : null)
        .filter(value => value !== null);

    // Prepare the data to send to the server
    const requestData = { parameters: selectedParameters,callEndpoint: true };

    // Show the spinner for the current section
    const spinner = document.getElementById('spinner-' + index);
    const saveButton = document.getElementById('save-prompt-' + index);
    const saveText=saveButton.querySelector('.save-text');
    if (spinner) {
        spinner.style.display = 'inline-block';
        saveText.style.display='none';
    }

    // Make a fetch request to process the prompts and get the updated value
    fetch(`/process-next-section/${index}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            sections = data.sections;
            const nextIndex = index + 1;
            const nextSection = data.sections[nextIndex];
            const currentSectionElement = document.getElementById('section-' + index);
            
            if (currentSectionElement) {
                currentSectionElement.style.display = 'none';  
            }
       
            

            if (nextSection) {
                // Create and append the new section if not already present
                let nextSectionElement = document.getElementById('section-' + nextIndex);

                if (!nextSectionElement) {
                    // Create the section HTML
                    nextSectionElement = document.createElement('li');
                    nextSectionElement.id = 'section-' + nextIndex;
                    nextSectionElement.classList.add('visible');

                    // Add the content HTML
                    nextSectionElement.innerHTML = `
                        <strong>${nextSection.NAME}</strong>
                        <div id="content-${nextIndex}">
                            <p id="textarea-${nextIndex}" readonly>${nextSection.VALUE}</p>
                            <textarea type="text" id="input-${nextIndex}" value="${nextSection.VALUE}" style="display: none;"></textarea>
                            <div id="short-value-${nextIndex}" style="margin-top: 20px; color: #333;">
                            
                            </div>
                            <button onclick="viewMore(${nextIndex})" id="view-more-${nextIndex}" style="margin-top:20px; background:transparent;border:none;color:blue;display: none;cursor:pointer">View More</button>
                        </div>
                        <div class="buttons">
                            <button onclick="editSection(${nextIndex})" id="edit-${nextIndex}" class="edit-text">Edit</button>
                            <button onclick="acceptSection(${nextIndex})" id="accept-${nextIndex}">
                                <span class="accept-text">Accept</span>
                                <div id="spinner-${nextIndex}" class="spinner" style="display: none;"></div> <!-- Spinner element -->
                            </button>
                            <button onclick="saveSection(${nextIndex})" id="save-${nextIndex}" style="display:none;">
                                <span class="save-text">Save</span>
                                    <div id="saveSpinner-${nextIndex}" class="spinner" style="display: none;"></div> <!-- Spinner added here -->
                              </button>
                            <button onclick="discardSection(${nextIndex})" id="discard-${nextIndex}" style="display:none;">Discard</button>
                        </div>
                    `;

                    document.querySelector('ul').appendChild(nextSectionElement);
                } else {
                    nextSectionElement.classList.add('visible');
                }

                // Scroll to the next section
                nextSectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
            } else {
                // If all sections are accepted, show the download button
                document.getElementById('download-btn').style.display = 'block';
                document.getElementById('download-word-btn').style.display = 'block';
            }
        } else {
            console.error('Server error:', data.message);
        }
    })
    .catch(error => console.error('Error processing prompts:', error))
    .finally(() => {
        // Hide the spinner after the request is complete
        if (spinner) {
            spinner.style.display = 'none';
        }
    });
}

function editSection(index) {

            const textarea = document.getElementById('textarea-' + index);
            const input = document.getElementById('input-' + index);
            const editButton = document.getElementById('edit-' + index);
            const saveButton = document.getElementById('save-' + index);
            const discardButton = document.getElementById('discard-' + index);
            const acceptButton = document.getElementById('accept-' + index);
            const shortValueDiv = document.getElementById('short-value-' + index);
            const spinner = document.getElementById('saveSpinner-' + index); // Spinner element
            const saveText=saveButton?saveButton.querySelector('.save-text'):null;
            const viewMoreButton = document.getElementById('view-more-' + index);
            // Initialize input field with textarea value
            input.value = textarea.textContent;
            textarea.style.display = 'none';
            input.style.display = 'block';
            spinner.style.display = 'none';
            saveText.style.display='inline-block';

            editButton.style.display = 'none';
            acceptButton.style.display = 'none';
            shortValueDiv.style.display = 'none';
            saveButton.style.display = 'inline-block';
            discardButton.style.display = 'inline-block';
            viewMoreButton.style.display = 'none';
          
        }


        function saveSection(index) {
            const textarea = document.getElementById('textarea-' + index);
            const input = document.getElementById('input-' + index);
            const shortValueDiv = document.getElementById('short-value-' + index);
            const spinner = document.getElementById('saveSpinner-' + index); // Spinner element
            const editButton = document.getElementById('edit-' + index);
            const saveButton = document.getElementById('save-' + index);
            const viewMoreButton = document.getElementById('view-more-' + index);
            const value = input.value;
            let previousSectionBeingEdited = false;

            if(acceptedSections.has(index)) {
                previousSectionBeingEdited = true;
            }
            textarea.textContent = value;
            if(spinner) {
              
                spinner.style.display = 'inline-block';
            }
          
            // Populate the short value div
            if (shortValueDiv) {
                shortValueDiv.textContent = textarea ? (textarea.textContent.match(/([^\.!\?]+[\.!\?]+){1,2}/)?.[0] || textarea.textContent) : '';
                shortValueDiv.style.display = 'block';
                const sentenceCount = textarea.textContent.split(/[.!?]+/).filter(Boolean).length;
                // Show "View More" button only if there are more than 2 sentences
                if (sentenceCount > 2) {
                    viewMoreButton.style.display = 'inline-block';
                } else {
                    viewMoreButton.style.display = 'none';
                }
              
            }
            fetch(`/update-tor/${index}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ value: value, isTextField: true }),
            })
                .then(response => response.json())
                .then(data => {
if(previousSectionBeingEdited) {
    
    saveButton.style.display = 'none';
        if (editButton) {
                    editButton.classList.remove('edit-text');
                    editButton.classList.add('edit-icon');
                    editButton.style.backgroundColor = 'transparent';
                    editButton.innerHTML = '✏️';
                    editButton.style.display = 'inline-block';
                }
                
    
}
                    acceptSection(index, true,false); // Handle the accepted section properly.
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }


        function discardSection(index) {
            const input = document.getElementById('input-' + index);
            document.getElementById('save-' + index).style.display = 'none';
            document.getElementById('discard-' + index).style.display = 'none';
            document.getElementById('accept-' + index).style.display = 'none';
            const shortValueDiv = document.getElementById('short-value-' + index);
            const viewMoreButton = document.getElementById('view-more-' + index);
            let previousSectionBeingEdited = false;

if(acceptedSections.has(index)) {
    previousSectionBeingEdited = true;
}
console.log('Previous Section:',previousSectionBeingEdited);
if(previousSectionBeingEdited) {
        
            const textarea = document.getElementById('textarea-' + index);

            const editButton = document.getElementById('edit-' + index);
            editButton.classList.remove('edit-text');
            editButton.classList.add('edit-icon');
            editButton.style.backgroundColor = 'transparent';
            editButton.innerHTML = '✏️';
            editButton.style.display = 'inline-block';

         
            // Hide input and textarea
            input.style.display = 'none';
            textarea.style.display = 'none';
            
           
            if (shortValueDiv) {
                shortValueDiv.textContent = textarea ? (textarea.textContent.match(/([^\.!\?]+[\.!\?]+){1,2}/)?.[0] || textarea.textContent) : '';
            shortValueDiv.style.display = 'block';
            const sentenceCount = textarea.textContent.split(/[.!?]+/).filter(Boolean).length;
            // Show "View More" button only if there are more than 2 sentences
            if (sentenceCount > 2) {
                viewMoreButton.style.display = 'inline-block';
            } else {
                viewMoreButton.style.display = 'none';
            }
            

        }

    }
    else{
        const textarea = document.getElementById('textarea-' + index);
        const input = document.getElementById('input-' + index);
        const editButton = document.getElementById('edit-' + index);
        const saveButton = document.getElementById('save-' + index);
        const discardButton = document.getElementById('discard-' + index);
        const acceptButton = document.getElementById('accept-' + index);
        const shortValueDiv = document.getElementById('short-value-' + index);
        const spinner = document.getElementById('saveSpinner-' + index); // Spinner element
        const saveText=saveButton?saveButton.querySelector('.save-text'):null;
        // Initialize input field with textarea value
      
        shortValueDiv.style.display = 'none';
      
        input.style.display = 'none';
        textarea.style.display = 'block';
        acceptButton.style.display = 'inline-block';
        editButton.style.display = 'inline-block';
    }

            // If needed, hide the accept button after discarding
            // acceptButton.style.display = 'none'; 
        }

        function acceptSection(index, calledFromSave = false, calledFromStartDate = false) {
    const acceptButton = document.getElementById('accept-' + index);
    const editButton = document.getElementById('edit-' + index);
    const textarea = document.getElementById('textarea-' + index);
    const spinner = document.getElementById('spinner-' + index);
    const acceptText = acceptButton ? acceptButton.querySelector('.accept-text') : null;
    const shortValueDiv = document.getElementById('short-value-' + index);
    const viewMoreButton = document.getElementById('view-more-' + index);
    const input = document.getElementById('input-' + index);
    const saveButton = document.getElementById('save-' + index);
    const saveText = saveButton ? saveButton.querySelector('.save-text') : null;
    let callEndpoint = true;

    if (acceptedSections.has(index)) {
        if(index!==0) {
          
        callEndpoint = false;
        }
    
    }

    // Ensure the spinner is visible
    if (spinner) {
        spinner.style.display = 'inline-block';
        if (acceptText) acceptText.style.display = 'none';
        if (saveText) saveText.style.display = 'none';
    }

    if (input) {
        input.style.display = 'none';
    }

    document.getElementById('discard-' + index).style.display = 'none';
    acceptedSections.add(index);

    // Hide the accept button and update the edit button after processing
    if (index == 0) {
        if (acceptButton) {
            acceptButton.style.display = 'none';
        }
        if (editButton) {
            editButton.classList.remove('edit-text');
            editButton.classList.add('edit-icon');
            editButton.style.backgroundColor = 'transparent';
            editButton.innerHTML = '✏️';
            editButton.style.display = 'inline-block';
        }
        if (textarea) {
            textarea.style.display = 'none';
        }
        if (saveButton) {
            saveButton.style.display = 'none';
        }
        // Populate the short value div
        if (shortValueDiv) {
    const textareaContent = textarea ? textarea.textContent : '';
    const sentenceCount = textareaContent.split(/[.!?]+/).filter(Boolean).length;
  console.log('Sentence Count:',sentenceCount);
    // Show the first two sentences or less
    shortValueDiv.textContent = textareaContent.match(/([^\.!\?]+[\.!\?]+){1,2}/)?.[0] || textareaContent;
    shortValueDiv.style.display = 'block';

    // Show "View More" button only if there are more than 2 sentences
    if (sentenceCount > 2) {
        viewMoreButton.style.display = 'inline-block';
    } else {
        viewMoreButton.style.display = 'none';
    }
}

    }

    if (index === 0 && !calledFromStartDate) {
        // Show the date section if the current section is 0
        document.getElementById('date-section').style.display = 'block';
        return; // Stop processing until the date is saved
    }

    // Send a request to process the accepted section
    const textareaValue = textarea ? textarea.textContent : '';
    fetch(`/process-next-section/${index}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ value: textareaValue, calledFromSave, calledFromStartDate, callEndpoint })
    })
    .then(response => {
        // Log the response for debugging
        console.log('Response:', response);
        if (!response.ok) {
            throw new Error('Network response was not ok: ' + response.status);
        }
        return response.json(); // Parse JSON only if response is ok
    })
    .then(data => {
        if (data.success) {
            // Proceed to the next section
            const nextIndex = index + 1;

            const nextSection = document.getElementById('section-' + nextIndex);
            if (editButton && callEndpoint) {
                saveButton.style.display = 'none';
                editButton.classList.remove('edit-text');
                editButton.classList.add('edit-icon');
                editButton.style.backgroundColor = 'transparent';
                editButton.innerHTML = '✏️';
                editButton.style.display = 'inline-block';
            }

            if (nextSection) {
                // Show and update the next section if it already exists
                nextSection.classList.add('visible');
                const nextTextarea = document.getElementById('textarea-' + nextIndex);
                if (nextTextarea) {
                    nextTextarea.textContent = data.sections[nextIndex].VALUE;
                }
                nextSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
            } else if (data.sections[nextIndex]) {
                // Create and display the new next section dynamically
                const nextSectionElement = document.createElement('li');
                nextSectionElement.id = 'section-' + nextIndex;
                nextSectionElement.classList.add('visible');

                // Add the content HTML
                nextSectionElement.innerHTML = `
                    <strong>${data.sections[nextIndex].NAME}</strong>
                    <div id="content-${nextIndex}">
                        <p id="textarea-${nextIndex}" readonly>${data.sections[nextIndex].VALUE}</p>
                        <textarea type="text" id="input-${nextIndex}" value="${data.sections[nextIndex].VALUE}" style="display: none;"></textarea>
                        <div id="short-value-${nextIndex}" style="margin-top: 20px; color: #333;">
                            <!-- Short value will be displayed here -->
                        </div>
                        <button onclick="viewMore(${nextIndex})" id="view-more-${nextIndex}"  style="margin-top:20px; background:transparent;border:none;color:blue;display: none;cursor:pointer">View More</button>
                    </div>
                    <div class="buttons">
                        <button onclick="editSection(${nextIndex})" id="edit-${nextIndex}" class="edit-text">Edit</button>
                        <button onclick="acceptSection(${nextIndex})" id="accept-${nextIndex}">
                            <span class="accept-text">Accept</span>
                            <div id="spinner-${nextIndex}" class="spinner" style="display: none;"></div>
                        </button>
                        <button onclick="saveSection(${nextIndex})" id="save-${nextIndex}" style="display:none;">
                            <span class="save-text">Save</span>
                            <div id="saveSpinner-${nextIndex}" class="spinner" style="display: none;"></div>
                        </button>
                        <button onclick="discardSection(${nextIndex})" id="discard-${nextIndex}" style="display:none;">Discard</button>
                    </div>
                `;

                // Append the new section to the section list
                document.querySelector('ul').appendChild(nextSectionElement);
            }
        } else {
            console.error('Error processing section:', data.message);
            // All sections are accepted, show the download buttons
            document.getElementById('download-btn').style.display = 'block';
            document.getElementById('download-word-btn').style.display = 'block';
        }
    })
    .catch(error => {
        console.error('ErrorIN HERE:', error);
        // Handle other errors here (like network errors)
    })
    .finally(() => {
        // Hide the spinner after the request is complete
        if (spinner) {
            spinner.style.display = 'none';
        }
        document.getElementById('save-start-date').style.display = 'none';

        // Hide the accept button and update the edit button after processing
        if (acceptButton) {
            acceptButton.style.display = 'none';
        }

        if (editButton) {
            editButton.classList.remove('edit-text');
            editButton.classList.add('edit-icon');
            editButton.style.backgroundColor = 'transparent';
            editButton.innerHTML = '✏️';
        }

        if (textarea) {
            textarea.style.display = 'none';
        }
        // Populate the short value div
        if (shortValueDiv && !calledFromSave) {
            shortValueDiv.textContent = textarea ? (textarea.textContent.match(/([^\.!\?]+[\.!\?]+){1,2}/)?.[0] || textarea.textContent) : '';
            shortValueDiv.style.display = 'block';
            const sentenceCount = textarea.textContent.split(/[.!?]+/).filter(Boolean).length;
            // Show the first two sentences or less
            if(sentenceCount > 2) {
                viewMoreButton.style.display = 'inline-block';
            }
            else {
                viewMoreButton.style.display = 'none';
            }
        }
    });

    // Ensure previously accepted sections remain visible
    document.querySelectorAll('li').forEach((section, i) => {
        if (acceptedSections.has(i)) {
            section.classList.add('visible');
        }
    });
}

 function viewMore(index) {
    const textarea = document.getElementById('textarea-' + index);
    const shortValueDiv = document.getElementById('short-value-' + index);
    const viewMoreButton = document.getElementById('view-more-' + index);
    textarea.style.display = 'block';
    shortValueDiv.style.display = 'none';
    viewMoreButton.style.display = 'none';
    
}

</script>
</body>



</html>