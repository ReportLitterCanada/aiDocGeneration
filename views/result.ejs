<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Evaluation Results</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f2f5;
            color: #334;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
            font-size: 2.5em;
            letter-spacing: 1px;
        }

        ul {
            list-style: none;
            padding: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }

        li {
            background: #fff;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            max-width: 800px;
            width: 100%;
            display: none;
            transform: translateY(20px);
            opacity: 0;
            transition: transform 0.3s ease, opacity 0.3s ease;
        }

        li.visible {
            display: block;
            transform: translateY(0);
            opacity: 1;
        }

        strong {
            color: #333;
            font-weight: bold;
            font-size: 1.2em;
        }

        textarea,
        input[type="text"] {
            width: 100%;
            margin-top: 15px;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1.2em;
            background-color: #fafafa;
            transition: border-color 0.3s ease;
            box-sizing: border-box;
        }

        textarea {
            min-height: 150px;
        }

        textarea:focus,
        input[type="text"]:focus {
            border-color: #007bff;
            outline: none;
        }

        .buttons {
            margin-top: 20px;
            text-align: right;
        }

        .buttons button {
            padding: 10px 20px;
            margin-left: 10px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.1em;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }

        .buttons button:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }

        .buttons button:active {
            background-color: #003f7f;
            transform: translateY(0);
        }

        input[type="text"] {
            display: none;
        }

        .edit-text {
            background-color: transparent;
            border: none;
            cursor: pointer;
            font-size: 1em;
            color: #007bff;
            transition: color 0.3s ease;
        }

        .edit-icon {
            background-color: transparent;
            border: none;
            cursor: pointer;
            font-size: 1.5em;
            color: #007bff;
            transition: color 0.3s ease;
        }

        #download-btn,
        #download-word-btn {
            display: none;
            margin-top: 30px;
            padding: 15px 30px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1.2em;
            text-align: center;
            transition: background-color 0.3s ease, transform 0.2s ease;
            max-width: 800px;
            width: 100%;
        }

        #download-btn:hover,
        #download-word-btn:hover {
            background-color: #0056b3;
            transform: translateY(-2px);
        }

        #download-btn:active,
        #download-word-btn:active {
            background-color: #003f7f;
            transform: translateY(0);
        }

        select {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1.1em;
            background-color: #fafafa;
            box-sizing: border-box;
            transition: border-color 0.3s ease;
        }

        select:focus {
            border-color: #007bff;
            outline: none;
        }

        #extraPrompt label {
            display: block;
            margin-top: 10px;
            font-weight: bold;
        }
    </style>
</head>

<body>
    <h1>Evaluation Results</h1>
    <ul>

        <label for="typeOfEvaluation">Type of Evaluation:</label>
        <select id="typeOfEvaluation" name="typeOfEvaluation" required>
            <option value="" disabled selected>Select type</option>
            <option value="Project Evaluation">Project Evaluation</option>
            <option value="Outcome Evaluation">Outcome Evaluation</option>
            <option value="Thematic Evaluation">Thematic Evaluation</option>
        </select>
        
        <div class="buttons">
            <button id="save-evaluation-type" onclick="saveEvaluationType()">Save Evaluation Type</button>
        </div>

        <% sections.forEach(function(section, index) { %>
            <li id="section-<%= index %>" class="<%= index === 0 ? '' : '' %>">

                <!-- Show extraPromptParameters dropdown first if present -->
                <div id="extraPrompt-<%= index %>">
                    <% if (section.extraPromptParameters && section.extraPromptParameters.length> 0) { %>
                        <strong for="extraPrompt-<%= index %>">Which evaluation criteria do you want to include in the Terms of Reference?</strong><br />
                        <% section.extraPromptParameters.forEach(function(parameter) { %>
                            <label for="<%= parameter.code %>">
                                <%= parameter.name %>
                            </label>
                            <input type="checkbox" id="<%= parameter.code %>" name="<%= parameter.code %>"
                                value="<%= parameter.code %>" />
                            <% }); %>

                                <div class="buttons">
                                    <button id="save-prompt-<%= index %>"
                                        onclick="savePromptForSection(<%= index %>)">Save</button>
                                </div>
                                <% } else { %>
                                    <!-- If no extraPromptParameters, show section name and value directly -->
                                    <strong>
                                        <%= section.NAME %>:
                                    </strong>
                                    <div id="content-<%= index %>">
                                        <textarea id="textarea-<%= index %>" readonly><%= section.VALUE %></textarea>
                                        <input type="text" id="input-<%= index %>" value="<%= section.VALUE %>"
                                            style="display: none;" />
                                    </div>
                                    <div class="buttons">
                                        <button onclick="editSection(<%= index %>)" id="edit-<%= index %>"
                                            class="edit-text">Edit</button>
                                        <button onclick="acceptSection(<%= index %>)"
                                            id="accept-<%= index %>">Accept</button>
                                        <button onclick="saveSection(<%= index %>)" id="save-<%= index %>"
                                            style="display:none;">Save</button>
                                        <button onclick="discardSection(<%= index %>)" id="discard-<%= index %>"
                                            style="display:none;">Discard</button>
                                    </div>
                                    <% } %>
                </div>
            </li>
            <% }); %>
    </ul>


    <div
        style="display: flex; justify-content: center; align-items: center; gap: 10px; max-width: 850px; margin: 0 auto;">
        <button id="download-btn" onclick="downloadFile()">Download PDF</button>
        <button id="download-word-btn" onclick="downloadWordFile()">Download Word</button>
    </div>

    <script>
        function saveEvaluationType() {
    const typeOfEvaluation = document.getElementById('typeOfEvaluation').value;

    if (!typeOfEvaluation) {
        alert('Please select a type of evaluation.');
        return;
    }

    // Store the type of evaluation (send it to the server or save locally)
    console.log('Evaluation Type:', typeOfEvaluation);
    

    // Hide the evaluation type dropdown and save button
    document.getElementById('typeOfEvaluation').style.display = 'none';
    document.getElementById('save-evaluation-type').style.display = 'none';

    // Show the first section
    const firstSection = document.getElementById('section-0');
    if (firstSection) {
        firstSection.classList.add('visible');
    }
}

        function downloadWordFile() {
            fetch('/download-word', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok.');
                    }
                    return response.blob();
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(new Blob([blob]));
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = 'Evaluation_Results.docx';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                })
                .catch(error => console.error('Download error:', error));
        }

        function downloadFile() {
            fetch('/download-pdf', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok.');
                    }
                    return response.blob();
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(new Blob([blob]));
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = 'Evaluation_Results.pdf';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                })
                .catch(error => console.error('Download error:', error));
        }

        let acceptedSections = new Set();
        // Embedding the sections array directly into the client-side JavaScript
        let sections = <%- JSON.stringify(sections) %>;
     
        function savePromptForSection(index) {
            const section = sections[index];
            const selectedParameters = section.extraPromptParameters
                .map(parameter => document.getElementById(parameter.code).checked ? parameter.code : null)
                .filter(value => value !== null);

            // Prepare the data to send to the server
            const requestData = { parameters: selectedParameters };

            // Make a fetch request to process the prompts and get the updated value
            fetch(`/process-next-section/${index}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        sections = data.sections;
                        console.log('Updated sections:', sections); // Debugging line

                        const nextIndex = index + 1;
                        const nextSection = data.sections[nextIndex];
                        const currentSectionElement = document.getElementById('section-' + index);
                        console.log('current section element', currentSectionElement);
                        if (currentSectionElement) {
                    currentSectionElement.style.display='none';  
                       }

                        if (nextSection) {
                            // Create and append the new section if not already present
                            let nextSectionElement = document.getElementById('section-' + nextIndex);

                            if (!nextSectionElement) {
                                // Create the section HTML
                                nextSectionElement = document.createElement('li');
                                nextSectionElement.id = 'section-' + nextIndex;
                                nextSectionElement.classList.add('visible');

                                // Add the content HTML
                                nextSectionElement.innerHTML = `
                        <strong>${nextSection.NAME}:</strong>
                        <div id="content-${nextIndex}">
                            <textarea id="textarea-${nextIndex}" readonly>${nextSection.VALUE}</textarea>
                            <input type="text" id="input-${nextIndex}" value="${nextSection.VALUE}" style="display: none;" />
                        </div>
                        <div class="buttons">
                            <button onclick="editSection(${nextIndex})" id="edit-${nextIndex}" class="edit-text">Edit</button>
                            <button onclick="acceptSection(${nextIndex})" id="accept-${nextIndex}">Accept</button>
                            <button onclick="saveSection(${nextIndex})" id="save-${nextIndex}" style="display:none;">Save</button>
                            <button onclick="discardSection(${nextIndex})" id="discard-${nextIndex}" style="display:none;">Discard</button>
                        </div>
                    `;

                                document.querySelector('ul').appendChild(nextSectionElement);
                            } else {
                                nextSectionElement.classList.add('visible');
                            }

                            // Scroll to the next section
                            nextSectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
                        } else {
                            // If all sections are accepted, show the download button
                            document.getElementById('download-btn').style.display = 'block';
                            document.getElementById('download-word-btn').style.display = 'block';
                        }
                    } else {
                        console.error('Server error:', data.message);
                    }
                })
                .catch(error => console.error('Error processing prompts:', error));
        }


        function editSection(index) {
            const textarea = document.getElementById('textarea-' + index);
            const input = document.getElementById('input-' + index);
            const editButton = document.getElementById('edit-' + index);
            const saveButton = document.getElementById('save-' + index);
            const discardButton = document.getElementById('discard-' + index);
            const acceptButton = document.getElementById('accept-' + index);

            // Initialize input field with textarea value
            input.value = textarea.value;
            textarea.style.display = 'none';
            input.style.display = 'block';

            editButton.style.display = 'none';
            acceptButton.style.display = 'none';
            saveButton.style.display = 'inline-block';
            discardButton.style.display = 'inline-block';
        }


        function saveSection(index) {
            const textarea = document.getElementById('textarea-' + index);
            const input = document.getElementById('input-' + index);
            const value = input.value;

            textarea.value = value;
            fetch(`/update-tor/${index}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ value: value, isTextField: true }),
            })
                .then(response => response.json())
                .then(data => {
                    textarea.style.display = 'block';
                    input.style.display = 'none';

                    document.getElementById('edit-' + index).style.display = 'inline-block';
                    document.getElementById('save-' + index).style.display = 'none';
                    document.getElementById('discard-' + index).style.display = 'none';

                    acceptSection(index, true); // Handle the accepted section properly.
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }


        function discardSection(index) {
            const input = document.getElementById('input-' + index);
            document.getElementById('save-' + index).style.display = 'none';
            document.getElementById('discard-' + index).style.display = 'none';
            document.getElementById('accept-' + index).style.display = 'none';
            const editButton = document.getElementById('edit-' + index);
            editButton.classList.remove('edit-text');
            editButton.classList.add('edit-icon');
            editButton.style.backgroundColor = 'transparent';
            editButton.innerHTML = '✏️';
            editButton.style.display = 'inline-block';

            const contentDiv = document.getElementById('content-' + index);
            // Hide input and textarea
            input.style.display = 'none';
            textarea.style.display = 'none';

            // Show contentDiv with the current input value
            contentDiv.style.display = 'none';
            contentDiv.textContent = input.value;


            // If needed, hide the accept button after discarding
            // acceptButton.style.display = 'none'; 
        }
        function acceptSection(index, calledFromSave = false) {
    acceptedSections.add(index);

    // Hide the accept button and update the edit button
    const acceptButton = document.getElementById('accept-' + index);
    const editButton = document.getElementById('edit-' + index);
    const textarea = document.getElementById('textarea-' + index);
    
    if (acceptButton) acceptButton.style.display = 'none';
    if (editButton) {
        editButton.classList.remove('edit-text');
        editButton.classList.add('edit-icon');
        editButton.style.backgroundColor = 'transparent';
        editButton.innerHTML = '✏️';
    }
    if (textarea) textarea.style.display = 'none';

    // Send a request to process the accepted section
    const textareaValue = textarea ? textarea.value : '';
    fetch(`/process-next-section/${index}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ value: textareaValue, calledFromSave })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log('DATA', data);
            // Proceed to the next section
            const nextIndex = index + 1;
            const nextSection = document.getElementById('section-' + nextIndex);

            if (nextSection) {
                // Show and update the next section if it already exists
                nextSection.classList.add('visible');
                const nextTextarea = document.getElementById('textarea-' + nextIndex);
                if (nextTextarea) {
                    nextTextarea.value = data.sections[nextIndex].VALUE;
                }
                nextSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
            } else if (data.sections[nextIndex]) {
                console.log('This condition');
                // Create and display the new next section dynamically
                const nextSectionElement = document.createElement('li');
                nextSectionElement.id = 'section-' + nextIndex;
                nextSectionElement.classList.add('visible');

                // Add the content HTML
                nextSectionElement.innerHTML = `
                    <strong>${data.sections[nextIndex].NAME}:</strong>
                    <div id="content-${nextIndex}">
                        <textarea id="textarea-${nextIndex}" readonly>${data.sections[nextIndex].VALUE}</textarea>
                        <input type="text" id="input-${nextIndex}" value="${data.sections[nextIndex].VALUE}" style="display: none;" />
                    </div>
                    <div class="buttons">
                        <button onclick="editSection(${nextIndex})" id="edit-${nextIndex}" class="edit-text">Edit</button>
                        <button onclick="acceptSection(${nextIndex})" id="accept-${nextIndex}">Accept</button>
                        <button onclick="saveSection(${nextIndex})" id="save-${nextIndex}" style="display:none;">Save</button>
                        <button onclick="discardSection(${nextIndex})" id="discard-${nextIndex}" style="display:none;">Discard</button>
                    </div>
                `;

                // Append the new section to the section list
                document.querySelector('ul').appendChild(nextSectionElement);
            }
        } else {
            console.error('Error processing section:', data.message);
              // All sections are accepted, show the download buttons
              document.getElementById('download-btn').style.display = 'block';
                document.getElementById('download-word-btn').style.display = 'block';
        }
    })
    .catch(error => console.error('Error:', error));
}
      // Ensure previously accepted sections remain visible
        document.querySelectorAll('li').forEach((section, i) => {
            console.log('Checking section:', i, acceptedSections.has(i));
            if (acceptedSections.has(i)) {
                section.classList.add('visible');
            }
        });


    </script>
</body>

</html>